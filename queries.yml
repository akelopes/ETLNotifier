failures:
  description: Checks for failed pipelines in Prod, UAT and Beta
  message_single: "Pipeline **{}** - **{}** failed due to: \n\n > {}."
  message_multiple: "Multiple pipelines failed: \n\n"
  sql: |
    WITH PipelineRunsCte AS (
      SELECT
        EnvironmentId,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.Start' THEN AttributeValue END) AS StartTime,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.End' THEN AttributeValue END) AS EndTime,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.Status' THEN AttributeValue END) AS StatusPipeline,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.ErrorMessage' THEN AttributeValue END) AS errorMessage
      FROM EnvironmentAttributes
      GROUP BY EnvironmentId
    )
    SELECT
      a.AccountShortName AS AccountName,
      e.EnvironmentType AS Environment,
      p.StartTime,
      p.EndTime,
      LEFT(p.errorMessage, 450) + '...' AS errorMessage
    FROM PipelineRunsCte p
    JOIN dbo.Environments e ON e.EnvironmentId = p.EnvironmentId
    JOIN Accounts a ON a.AccountId = e.AccountId
    WHERE p.StatusPipeline = 'Failed'
      AND e.EnvironmentType in ('Prod', 'UAT', 'Beta')
      AND StartTime >= DATEADD(DAY, -2, GETDATE());

over_10h:
  description: Checks for pipeilnes running longer than 10 hours in Prod, UAT and Beta
  message_single: "Pipeline **{}** - **{}** is running for over 10 hours."
  message_multiple: "Multiple pipelines are running over 10 hours: \n\n"
  sql: |
    WITH PipelineRunsCte AS (
      SELECT
        EnvironmentId,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.Start' THEN AttributeValue END) AS StartTime,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.End' THEN AttributeValue END) AS EndTime,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.Status' THEN AttributeValue END) AS StatusPipeline
      FROM EnvironmentAttributes
      GROUP BY EnvironmentId
    )
    SELECT
      a.AccountShortName AS AccountName,
      e.EnvironmentType AS Environment,
      p.StartTime,
      p.EndTime,
      CAST(DATEDIFF(MINUTE, p.StartTime, GETDATE()) / 60 AS VARCHAR(10))
      + ':' +
      RIGHT('00' + CAST(DATEDIFF(MINUTE, p.StartTime, GETDATE()) % 60 AS VARCHAR(2)), 2)
      AS RunningTime
    FROM PipelineRunsCte p
    JOIN dbo.Environments e ON e.EnvironmentId = p.EnvironmentId
    JOIN Accounts a ON a.AccountId = e.AccountId
    WHERE p.StatusPipeline = 'Started'
      AND e.EnvironmentType IN ('Prod', 'UAT', 'Beta')
      AND StartTime >= DATEADD(DAY, -2, GETDATE())
      AND DATEDIFF(MINUTE, p.StartTime, GETDATE()) > 610  -- 10 minutes grace period
    ORDER BY DATEDIFF(MINUTE, p.StartTime, GETDATE()) DESC;

not_started:
  description: checks for pipelines that haven't started in over 24 hours for active accounts in Prod, UAT and Beta.
  message_single: "Pipeline **{}** - **{}** has not started in over 24 hours."
  message_multiple: "Multiple pipelines have not started in over 24 hours: \n\n"
  sql: |
    WITH PipelineRunsCte AS (
      SELECT
        EnvironmentId,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.Start' THEN AttributeValue END) AS StartTime,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.End' THEN AttributeValue END) AS EndTime,
        MAX(CASE WHEN AttributeName = 'Pipeline.Main.Status' THEN AttributeValue END) AS StatusPipeline
      FROM EnvironmentAttributes
      GROUP BY EnvironmentId
    )
    SELECT
      a.AccountShortName AS AccountName,
      e.EnvironmentType AS Environment,
      p.StartTime,
      p.EndTime,
      p.StatusPipeline,
      CAST(DATEDIFF(MINUTE, p.StartTime, GETDATE()) / 60 AS VARCHAR(10))
      + ':' +
      RIGHT('00' + CAST(DATEDIFF(MINUTE, p.StartTime, GETDATE()) % 60 AS VARCHAR(2)), 2)
      AS RunningTime
    FROM PipelineRunsCte p
    JOIN dbo.Environments e ON e.EnvironmentId = p.EnvironmentId
    JOIN Accounts a ON a.AccountId = e.AccountId
    WHERE e.EnvironmentType IN ('Prod', 'UAT', 'Beta')
      AND a.AccountStatus = 'Active'
      AND p.StartTime >= DATEADD(DAY, -2, GETDATE())
      AND DATEDIFF(MINUTE, p.StartTime, GETDATE()) > 1450 -- 10 minutes grace period
      AND p.StatusPipeline <> 'Started'
    ORDER BY p.StartTime DESC;
